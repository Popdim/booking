from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.enums import ParseMode

import logging
import asyncio
from cfg import bot_token
from keyboards.bot_keyboard import create_kb1, create_kb2, create_kb3
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

uslugi = ["–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "Fade", "–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã"]


bot = Bot(token=bot_token)
dp = Dispatcher()

class ms(StatesGroup):
    usluga = State()
    data = State()
    vremya = State()
    podt = State()

@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=create_kb1)

@dp.message(F.text=='–ò–Ω—Ñ–æ')
async def send_info(message: Message):
    await message.reply("–ò–Ω—Ñ–æ..", reply_markup=create_kb2)

@dp.message(F.text=='–ù–∞–∑–∞–¥')
async def send_nazad(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=create_kb1)


@dp.message(F.text=='–ó–∞–ø–∏—Å—åüìÖ')
async def send_zapi(message: Message):
    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É \n–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 2400—Ä \nFade - 1800—Ä\n–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 1700—Ä\n–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã - 2000—Ä", reply_markup=create_kb3)



@dp.message(F.text in uslugi)
async def send_zapis(message: Message):
    await message.reply("2 2 2")

if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)