from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
import logging
import asyncio
from cfg import bot_token
from keyboards.bot_keyboard import create_kb1, create_kb2, create_kb3, create_kb4
from keyboards.bot_keyboard_inline import get_data_kb, get_time_kb, get_yesno
from utilits.get_data import get_dates, get_times

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

menu = ['–ò–Ω—Ñ–æ', '–ó–∞–ø–∏—Å—åüìÖ']
uslugi = ["–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "Fade", "–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã"]
danet = ['–î–∞', '–ù–µ—Ç']

storage = MemoryStorage()

bot = Bot(token=bot_token)
dp = Dispatcher(storage=storage)


class Ms(StatesGroup):
    usluga = State()
    data = State()
    vremya = State()
    podt = State()
    finish = State()


@dp.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=create_kb1)
    await state.set_state(Ms.usluga)

@dp.message(Ms.usluga, F.text == '–ò–Ω—Ñ–æ')
async def send_info(message: Message, state: FSMContext):
    await message.reply(
        "–° –ø–æ—â–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –≤ –Ω–∞—à–µ–º –±–∞—Ä–±–µ—Ä—à–æ–ø–µ. "
        "\n–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ - –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ > @geekami")


@dp.message(Ms.usluga, F.text == '–ó–∞–ø–∏—Å—åüìÖ')
async def send_zapis(message: Message, state: FSMContext):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É \n–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 2400—Ä \nFade - 1800—Ä\n–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 1700—Ä\n–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã - 2000—Ä",
        reply_markup=create_kb3)
    await state.set_state(Ms.data)

@dp.message(Ms.usluga)
async def incorrect_zapis(message: Message):
    await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É", reply_markup=create_kb3)

@dp.message(Ms.data)
async def send_data(callback_query: CallbackQuery, state: FSMContext):
# async def send_data(message: Message, state: FSMContext):
    print(state.update_data(usluga=callback_query.text))
    user_temp=await state.get_data()
    print('65')
    print(user_temp)
    k = get_dates()
    ikeyb = get_data_kb(k)
    # await callback_query.message.answer(
    #     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=keyboard)
    print(ikeyb)
    await callback_query.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=ikeyb)
    await state.set_state(Ms.vremya)



# @dp.message(Ms.data)
# async def incorrect_data(message: Message):
#     await message.answer("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è!")

# F.data.startswith("data")
@dp.callback_query(F.data.startswith("data:"), Ms.vremya)
async def process_selected_time(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.split(":")[1]
    state.update_data(usdata=date_str)
    k = get_dates()
    ikeyb = get_time_kb(k)
    print(k)
    print(ikeyb)
    await callback.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_str}")
    await callback.message.answer(f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è {date_str}", reply_markup=ikeyb)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.update_data(selected_date=date_str)
    await state.set_state(Ms.podt)
    print('*' * 50)
    print(f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ {date_str}")
    print('*' * 50)


@dp.callback_query(F.data.startswith("time:"), Ms.podt)
async def process_selected_yesno(callback: CallbackQuery, state: FSMContext):
    date_str = callback.data.split(":")[1]
    state.update_data(ustime=date_str)
    yn_kb = get_yesno()
    print("Xd")
    print(date_str)
    print(yn_kb)

    await callback.answer()  # –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    hsm = await state.get_data()
    print(hsm)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=f"""–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å
             {hsm['usluga']}-{hsm['usdata']}-{hsm['ustime']}""",
        reply_markup=yn_kb
    )
    await state.set_state(Ms.usluga)
    # await state.update_data(selected_date=date_str)
    # await state.set_state(Ms.finish)

#
# @dp.message(Ms.vremya)
# async def incorrect_vreamya(message: Message):
#     await message.answer("–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è!")
#
# @dp.message(Ms.podt)
# async def approve(message: Message, state: FSMContext):
#     await message.answer("... –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å", reply_markup=create_kb4)
#     await state.set_state(Ms.finish)
#
# @dp.message(Ms.podt)
# async def incorrect_approve(message: Message):
#     await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É", reply_markup=create_kb1)
#





if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)
