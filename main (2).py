from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.enums import ParseMode
import logging
import asyncio
from cfg import bot_token
from keyboards.bot_keyboard import create_kb1, create_kb2, create_kb3, create_kb4
from keyboards.bot_keyboard_inline import get_data_kb
from utilits.get_data import get_dates

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)

menu = ['–ò–Ω—Ñ–æ', '–ó–∞–ø–∏—Å—åüìÖ']
uslugi = ["–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "Fade", "–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞", "–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã"]
danet = ['–î–∞', '–ù–µ—Ç']


bot = Bot(token=bot_token)
dp = Dispatcher()


class Ms(StatesGroup):
    usluga = State()
    data = State()
    vremya = State()
    podt = State()
    finish = State()


@dp.message(Command("start"))
async def send_welcome(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=create_kb1)
    await state.set_state(Ms.usluga)

@dp.message(Ms.usluga, F.text == '–ò–Ω—Ñ–æ')
async def send_info(message: Message, state: FSMContext):
    await message.reply(
        "–° –ø–æ—â–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å—Ç—Ä–∏–∂–∫—É –≤ –Ω–∞—à–µ–º –±–∞—Ä–±–µ—Ä—à–æ–ø–µ. "
        "\n–ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –≤ —Ä–∞–±–æ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ - –ø–∏—à–∏—Ç–µ —Å—é–¥–∞ > @geekami")


@dp.message(Ms.usluga, F.text == '–ó–∞–ø–∏—Å—åüìÖ')
async def send_zapis(message: Message, state: FSMContext):
    await message.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É \n–ú—É–∂—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 2400—Ä \nFade - 1800—Ä\n–î–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∏–∂–∫–∞ - 1700—Ä\n–°—Ç—Ä–∏–∂–∫–∞ –±–æ—Ä–æ–¥—ã - 2000—Ä",
        reply_markup=create_kb3)
    await state.set_state(Ms.data)

@dp.message(Ms.usluga)
async def incorrect_zapis(message: Message):
    await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É", reply_markup=create_kb3)

@dp.message(Ms.data)
# async def send_data(callback_query: CallbackQuery, state: FSMContext):
async def send_data(message: Message, state: FSMContext):
    k = get_dates()
    keyboard = get_data_kb(k)
    # await callback_query.message.answer(
    #     "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=keyboard)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=keyboard)
    await state.set_state(Ms.vremya)


@dp.message(Ms.data)
async def incorrect_data(message: Message):
    await message.answer("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≤—Ä–µ–º—è!")

# @dp.message(Ms.vremya)
@dp.callback_query(Ms.vremya)
async def send_vremya(callback_query: CallbackQuery, state: FSMContext):
    select_data = callback_query.data.split(':')[1]
    print(select_data)
    await message.reply(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 18:00")
    await state.set_state(Ms.podt)

@dp.message(Ms.vremya)
async def incorrect_vreamya(message: Message):
    await message.answer("–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –≤—Ä–µ–º—è!")

@dp.message(Ms.podt)
async def approve(message: Message, state: FSMContext):
    await message.answer("... –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å", reply_markup=create_kb4)
    await state.set_state(Ms.finish)

@dp.message(Ms.podt)
async def incorrect_approve(message: Message):
    await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –¥–µ–π—Å—Ç–≤–∏–µ! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É", reply_markup=create_kb1)

@dp.message(Ms.finish, F.text == '–î–∞')
async def aprove(message: Message, state: FSMContext):
    await message.answer("–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å", reply_markup=create_kb1)
    await state.set_state(Ms.usluga)

@dp.message(Ms.finish, F.text == '–ù–µ—Ç')
async def aprove(message: Message, state: FSMContext):
    await message.answer("–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –∑–∞–ø–∏—Å—å", reply_markup=create_kb1)
    await state.clear(Ms.usluga)




if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)
